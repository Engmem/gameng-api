// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/gameng/gameng.proto

package gamengv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GamengClient is the client API for Gameng service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamengClient interface {
	// Для получения новых 4 слов для пользователя
	// Выводим для ознакомления
	GetNewWords(ctx context.Context, in *GetNewWordsRequest, opts ...grpc.CallOption) (*GetNewWordsResponse, error)
	// Для получения слов с переводами для пользователя
	// Выводим по 1 слову с переводами (кнопками) (1 из 4 верный)
	GetWordWithTranslations(ctx context.Context, in *GetWordsWithTranslationsRequest, opts ...grpc.CallOption) (*GetWordsWithTranslationsResponse, error)
	// Для получения слов с аудио и переводами
	// Выводим по 1 аудио и переводами (кнопками) (1 из 4 верный)
	GetWordByAudio(ctx context.Context, in *GetWordsByAudioRequest, opts ...grpc.CallOption) (*GetWordsByAudioResponse, error)
	// Для получения предложений с пропущенным словом
	// Выводим по 1 предложению с словоми (кнопками) (1 из 4 верный)
	GetSentencesWithMissingWord(ctx context.Context, in *GetSentencesWithMissingWordRequest, opts ...grpc.CallOption) (*GetSentencesWithMissingWordResponse, error)
	// Для получения слова для перевода
	// Пользовтель должен ввести перевод слова (можно принять с 2 ошибками или дропать после 3 неудачных попыток)
	GetWordForTranslation(ctx context.Context, in *GetWordForTranslationRequest, opts ...grpc.CallOption) (*GetWordForTranslationResponse, error)
}

type gamengClient struct {
	cc grpc.ClientConnInterface
}

func NewGamengClient(cc grpc.ClientConnInterface) GamengClient {
	return &gamengClient{cc}
}

func (c *gamengClient) GetNewWords(ctx context.Context, in *GetNewWordsRequest, opts ...grpc.CallOption) (*GetNewWordsResponse, error) {
	out := new(GetNewWordsResponse)
	err := c.cc.Invoke(ctx, "/gameng.Gameng/GetNewWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamengClient) GetWordWithTranslations(ctx context.Context, in *GetWordsWithTranslationsRequest, opts ...grpc.CallOption) (*GetWordsWithTranslationsResponse, error) {
	out := new(GetWordsWithTranslationsResponse)
	err := c.cc.Invoke(ctx, "/gameng.Gameng/GetWordWithTranslations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamengClient) GetWordByAudio(ctx context.Context, in *GetWordsByAudioRequest, opts ...grpc.CallOption) (*GetWordsByAudioResponse, error) {
	out := new(GetWordsByAudioResponse)
	err := c.cc.Invoke(ctx, "/gameng.Gameng/GetWordByAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamengClient) GetSentencesWithMissingWord(ctx context.Context, in *GetSentencesWithMissingWordRequest, opts ...grpc.CallOption) (*GetSentencesWithMissingWordResponse, error) {
	out := new(GetSentencesWithMissingWordResponse)
	err := c.cc.Invoke(ctx, "/gameng.Gameng/GetSentencesWithMissingWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamengClient) GetWordForTranslation(ctx context.Context, in *GetWordForTranslationRequest, opts ...grpc.CallOption) (*GetWordForTranslationResponse, error) {
	out := new(GetWordForTranslationResponse)
	err := c.cc.Invoke(ctx, "/gameng.Gameng/GetWordForTranslation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamengServer is the server API for Gameng service.
// All implementations must embed UnimplementedGamengServer
// for forward compatibility
type GamengServer interface {
	// Для получения новых 4 слов для пользователя
	// Выводим для ознакомления
	GetNewWords(context.Context, *GetNewWordsRequest) (*GetNewWordsResponse, error)
	// Для получения слов с переводами для пользователя
	// Выводим по 1 слову с переводами (кнопками) (1 из 4 верный)
	GetWordWithTranslations(context.Context, *GetWordsWithTranslationsRequest) (*GetWordsWithTranslationsResponse, error)
	// Для получения слов с аудио и переводами
	// Выводим по 1 аудио и переводами (кнопками) (1 из 4 верный)
	GetWordByAudio(context.Context, *GetWordsByAudioRequest) (*GetWordsByAudioResponse, error)
	// Для получения предложений с пропущенным словом
	// Выводим по 1 предложению с словоми (кнопками) (1 из 4 верный)
	GetSentencesWithMissingWord(context.Context, *GetSentencesWithMissingWordRequest) (*GetSentencesWithMissingWordResponse, error)
	// Для получения слова для перевода
	// Пользовтель должен ввести перевод слова (можно принять с 2 ошибками или дропать после 3 неудачных попыток)
	GetWordForTranslation(context.Context, *GetWordForTranslationRequest) (*GetWordForTranslationResponse, error)
	mustEmbedUnimplementedGamengServer()
}

// UnimplementedGamengServer must be embedded to have forward compatible implementations.
type UnimplementedGamengServer struct {
}

func (UnimplementedGamengServer) GetNewWords(context.Context, *GetNewWordsRequest) (*GetNewWordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewWords not implemented")
}
func (UnimplementedGamengServer) GetWordWithTranslations(context.Context, *GetWordsWithTranslationsRequest) (*GetWordsWithTranslationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordWithTranslations not implemented")
}
func (UnimplementedGamengServer) GetWordByAudio(context.Context, *GetWordsByAudioRequest) (*GetWordsByAudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordByAudio not implemented")
}
func (UnimplementedGamengServer) GetSentencesWithMissingWord(context.Context, *GetSentencesWithMissingWordRequest) (*GetSentencesWithMissingWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSentencesWithMissingWord not implemented")
}
func (UnimplementedGamengServer) GetWordForTranslation(context.Context, *GetWordForTranslationRequest) (*GetWordForTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordForTranslation not implemented")
}
func (UnimplementedGamengServer) mustEmbedUnimplementedGamengServer() {}

// UnsafeGamengServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamengServer will
// result in compilation errors.
type UnsafeGamengServer interface {
	mustEmbedUnimplementedGamengServer()
}

func RegisterGamengServer(s grpc.ServiceRegistrar, srv GamengServer) {
	s.RegisterService(&Gameng_ServiceDesc, srv)
}

func _Gameng_GetNewWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewWordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamengServer).GetNewWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameng.Gameng/GetNewWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamengServer).GetNewWords(ctx, req.(*GetNewWordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gameng_GetWordWithTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordsWithTranslationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamengServer).GetWordWithTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameng.Gameng/GetWordWithTranslations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamengServer).GetWordWithTranslations(ctx, req.(*GetWordsWithTranslationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gameng_GetWordByAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordsByAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamengServer).GetWordByAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameng.Gameng/GetWordByAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamengServer).GetWordByAudio(ctx, req.(*GetWordsByAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gameng_GetSentencesWithMissingWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSentencesWithMissingWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamengServer).GetSentencesWithMissingWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameng.Gameng/GetSentencesWithMissingWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamengServer).GetSentencesWithMissingWord(ctx, req.(*GetSentencesWithMissingWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gameng_GetWordForTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordForTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamengServer).GetWordForTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameng.Gameng/GetWordForTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamengServer).GetWordForTranslation(ctx, req.(*GetWordForTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gameng_ServiceDesc is the grpc.ServiceDesc for Gameng service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gameng_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameng.Gameng",
	HandlerType: (*GamengServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewWords",
			Handler:    _Gameng_GetNewWords_Handler,
		},
		{
			MethodName: "GetWordWithTranslations",
			Handler:    _Gameng_GetWordWithTranslations_Handler,
		},
		{
			MethodName: "GetWordByAudio",
			Handler:    _Gameng_GetWordByAudio_Handler,
		},
		{
			MethodName: "GetSentencesWithMissingWord",
			Handler:    _Gameng_GetSentencesWithMissingWord_Handler,
		},
		{
			MethodName: "GetWordForTranslation",
			Handler:    _Gameng_GetWordForTranslation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gameng/gameng.proto",
}
