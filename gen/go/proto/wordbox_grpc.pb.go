// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/wordbox.proto

package wordboxv0_2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordboxClient is the client API for Wordbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordboxClient interface {
	// To add new words to learn
	AddNewWords(ctx context.Context, in *AddNewWordsRequest, opts ...grpc.CallOption) (*AddNewWordsResponse, error)
	// To get words to repeat
	GetWordsToRepeat(ctx context.Context, in *GetWordsToRepeatRequest, opts ...grpc.CallOption) (*GetWordsToRepeatResponse, error)
}

type wordboxClient struct {
	cc grpc.ClientConnInterface
}

func NewWordboxClient(cc grpc.ClientConnInterface) WordboxClient {
	return &wordboxClient{cc}
}

func (c *wordboxClient) AddNewWords(ctx context.Context, in *AddNewWordsRequest, opts ...grpc.CallOption) (*AddNewWordsResponse, error) {
	out := new(AddNewWordsResponse)
	err := c.cc.Invoke(ctx, "/wordbox.Wordbox/AddNewWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordboxClient) GetWordsToRepeat(ctx context.Context, in *GetWordsToRepeatRequest, opts ...grpc.CallOption) (*GetWordsToRepeatResponse, error) {
	out := new(GetWordsToRepeatResponse)
	err := c.cc.Invoke(ctx, "/wordbox.Wordbox/GetWordsToRepeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordboxServer is the server API for Wordbox service.
// All implementations must embed UnimplementedWordboxServer
// for forward compatibility
type WordboxServer interface {
	// To add new words to learn
	AddNewWords(context.Context, *AddNewWordsRequest) (*AddNewWordsResponse, error)
	// To get words to repeat
	GetWordsToRepeat(context.Context, *GetWordsToRepeatRequest) (*GetWordsToRepeatResponse, error)
	mustEmbedUnimplementedWordboxServer()
}

// UnimplementedWordboxServer must be embedded to have forward compatible implementations.
type UnimplementedWordboxServer struct {
}

func (UnimplementedWordboxServer) AddNewWords(context.Context, *AddNewWordsRequest) (*AddNewWordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewWords not implemented")
}
func (UnimplementedWordboxServer) GetWordsToRepeat(context.Context, *GetWordsToRepeatRequest) (*GetWordsToRepeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordsToRepeat not implemented")
}
func (UnimplementedWordboxServer) mustEmbedUnimplementedWordboxServer() {}

// UnsafeWordboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordboxServer will
// result in compilation errors.
type UnsafeWordboxServer interface {
	mustEmbedUnimplementedWordboxServer()
}

func RegisterWordboxServer(s grpc.ServiceRegistrar, srv WordboxServer) {
	s.RegisterService(&Wordbox_ServiceDesc, srv)
}

func _Wordbox_AddNewWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewWordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordboxServer).AddNewWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordbox.Wordbox/AddNewWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordboxServer).AddNewWords(ctx, req.(*AddNewWordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wordbox_GetWordsToRepeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordsToRepeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordboxServer).GetWordsToRepeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordbox.Wordbox/GetWordsToRepeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordboxServer).GetWordsToRepeat(ctx, req.(*GetWordsToRepeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wordbox_ServiceDesc is the grpc.ServiceDesc for Wordbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wordbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wordbox.Wordbox",
	HandlerType: (*WordboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewWords",
			Handler:    _Wordbox_AddNewWords_Handler,
		},
		{
			MethodName: "GetWordsToRepeat",
			Handler:    _Wordbox_GetWordsToRepeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wordbox.proto",
}
